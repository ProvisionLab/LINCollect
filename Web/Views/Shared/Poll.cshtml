@model Web.Models.ViewModels.PreviewView
@{
    var region = ViewData["region"] as string;
}

@if (region == "Html")
{
    if (!ViewData.Keys.Contains("Passing"))
    {
        <h3 class="font-green-haze">Survey - Preview</h3>
    }
    foreach (var item in Model.Items.Select(c => c.Companies).Where(x => !string.IsNullOrEmpty(x.Error)))
    {
        <div class="row">
            <div class="col-xs-12">
                <p class="text-danger"><b>@item.RelationshipName:</b> @Html.Raw(item.Error)</p>
            </div>
        </div>
    }

    if (!string.IsNullOrEmpty(Model.Banner))
    {
        <div class="row">
            <div class="col-xs-12">
                <div class="embed-responsive embed-responsive-16by9">
                    <img style="max-height: 350px;" class="embed-responsive-item col-xs-12" src="@Url.Content("~/Content/files/img/" + Model.Banner)" />
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-xs-12">
            <h2 class="font-green-haze">@Model.SurveyName</h2>
        </div>
    </div>
    <div id="rootwizard">
        <div class="navbar">
            <div class="navbar-inner">
                <div class="container">
                    <div class="row">
                        <ul>
                            <li><a href="#tabStart" data-toggle="tab">Start</a></li>
                            @if (Model.AboutYouBefore != null && Model.AboutYouBefore.Questions.Any())
                            {
                                <li><a href="#tabAbout" data-toggle="tab">About you</a></li>
                            }

                            @foreach (var item in Model.Items)
                            {
                                <li>
                                    <a href="#tabRelation@(item.Id)" data-toggle="tab">
                                        @item.Name
                                    </a>
                                </li>
                            }

                            <li><a href="#tabFinish" data-toggle="tab">Finish</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-content">
            <div class="tab-pane" id="tabStart">
                <div class="row">
                    <div class="col-xs-12">
                        @Html.HiddenFor(m => m.UserLinkId)
                        @Html.Raw(Model.IntroductionText)
                        @Html.Raw(Model.LandingText)
                    </div>
                </div>
            </div>
            @if (Model.AboutYouBefore != null && Model.AboutYouBefore.Questions.Any())
                {
                <div class="tab-pane" id="tabAbout">
                    <div class="row">
                        <div class="col-xs-12 qdiv">
                            <h5 class="text-primary">Please answer the following questions about yourself:</h5>
                            <small><b>Note:</b> Questions marked with '*' are compulsory.</small>
                            <br />
                            @Html.HiddenFor(p => p.AboutYouBefore.Id)
                            @Html.Partial("Questions", Model.AboutYouBefore.Questions, new ViewDataDictionary { { "base", "AboutYouBefore" }, { "region", "Html" } })
                        </div>
                    </div>
                </div>
            }
            @for (int i = 0; i < Model.Items.Count; i++)
                {
                <div class="tab-pane" id="tabRelation@(Model.Items[i].Id)">
                    <input type="hidden" name="canNext" value="0" />
                    <div class="row">
                        @if (!string.IsNullOrEmpty(Model.Items[i].GeneratorName))
                        {
                            <div class="col-xs-12">
                                @Html.Raw(Model.Items[i].GeneratorName)
                            </div>
                        }
                        <div class="col-xs-6">
                            <div class="well">
                                <div>
                                    @if (Model.Items[i].UseDDSearch)
                                    {
                                    <div class="pull-right">
                                        <span>Search:</span>
                                        <input type="text" class="form-control-sm search-companies" data-id="@Model.Items[i].Id" />
                                        <button type="button" class="btn purple" onclick="resetSearch()">Reset</button>
                                    </div>
                                    }
                                    <b>Companies</b>
                                    <hr />
                                </div>
                                <div class="left-companies-@(Model.Items[i].Id)">
                                    @if (!string.IsNullOrEmpty(Model.Items[i].Companies.Error))
                                    {
                                    <div class="text-danger">@Html.Raw(Model.Items[i].Companies.Error)</div>
                                    }

                                    @for (int k = 0; k < Model.Items[i].Companies.Names.Count; k++)
                                    {
                                    <div class="company-prew" style="cursor: pointer" onclick="CompanyClick(this, @Model.Items[i].Id, '@($"Items[{i}].Companies.Names[{k}].Checked")')">
                                        @Html.HiddenFor(p => p.Items[i].Companies.Names[k].Name)
                                        @Html.HiddenFor(p => p.Items[i].Companies.Names[k].Checked)
                                        <i class="fa fa-plus-circle"></i>
                                        <i class="fa fa-minus-circle hide"></i> @Model.Items[i].Companies.Names[k].Name
                                    </div>
                                    }
                                </div>
                                @if (Model.Items[i].AllowSelectAllNodes)
                                {
                                <div>
                                    <hr />
                                    <div class="company-prew" style="cursor:pointer" onclick="AllCompanyClick(@Model.Items[i].Id, 1)"><i class="fa fa-plus-circle"></i> Add all</div>
                                </div>
                                }
                            </div>
                        </div>
                        <div class="col-xs-6">
                            <div class="well">
                                <div class="row">
                                    <div class="col-md-4"><b>Selection</b></div>
                                    <div class="col-md-8">
                                        @if (Model.Items[i].AddNodes)
                                        {
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="add-node-@Model.Items[i].Id" />
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn purple" onclick="AddNode(@(Model.Items[i].AddNodes ? 1 : 0), @(Model.Items[i].HideAddedNodes ? 1 : 0), @Model.Items[i].Id, @i)">Add</button>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <hr />
                                <div class="right-companies-@(Model.Items[i].Id)"></div>
                                @if (Model.Items[i].AllowSelectAllNodes)
                                {
                                    <div>
                                        <hr />
                                        <div class="company-prew" style="cursor: pointer" onclick="AllCompanyClick(@Model.Items[i].Id, 0)">
                                            <i class="fa fa-minus-circle"></i> Remove all
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 qdiv">
                            @Html.Hidden($"Items[{i}].Id", Model.Items[i].Id)
                            @Html.Partial("RQuestions", Model.Items[i].Questions, new ViewDataDictionary { { "base", $"Items[{i}]" }, { "region", "Html" } })
                            @if (i == 0)
                            {
                                <div id="NQResult" style="display: none"></div>
                            }
                            <input id="userCompanyNumber-@Model.Items[i].Id" type="hidden" value="0" />
                        </div>
                    </div>
                    @if (Model.Items[i].AddNodes)
                    {
                        <div class="modal fade" id="addNodeModal-@Model.Items[i].Id" tabindex="-1" role="dialog" aria-labelledby="addNodeLabel-@Model.Items[i].Id">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                        <h4 class="modal-title" id="addNodeLabel-@Model.Items[i].Id">Please answer the following questions about: <span id="name-@Model.Items[i].Id"></span></h4>
                                    </div>
                                    <div class="modal-body"></div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="RemoveNode(@Model.Items[i].Id)">Cancel</button>
                                        <button type="button" class="btn purple" onclick="SaveNode(@Model.Items[i].Id, @i)">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            <div class="tab-pane" id="tabFinish">
                <div class="row">
                    @if (Model.AboutYouAfter != null && Model.AboutYouAfter.Questions.Any())
                    {
                        <div class="col-xs-12 after-question qdiv">
                            <h5 class="text-primary">Please answer the following questions about yourself:</h5>
                            <small><b>Note:</b> Questions marked with '*' are compulsory.</small>
                            <br />
                            @Html.Partial("Questions", Model.AboutYouAfter.Questions, new ViewDataDictionary { { "base", "AboutYouAfter" }, { "region", "Html" } })
                        </div>
                    }
                    <div class="col-xs-12 thanks-text" style="display: none;">
                        @Html.Raw(Model.ThanksText)
                    </div>
                </div>
            </div>
            <br />
            <ul class="pager wizard">
                <li class="previous"><a href="javascript:;" class="btn btn-primary blue ">Previous</a></li>
                <li class="next"><a href="javascript:;" class="btn btn-primary blue ">Next</a></li>
                @if (ViewData["preview"] != null)
                {
                    <li class="finish"><button type="button" onclick="ValidateForm(true)" class="btn btn-primary blue">Finish</button></li>
                }
                else
                {
                    <li class="finish"><button type="button" onclick="ValidateForm(false)" class="btn btn-primary blue">Finish</button></li>
                }
            </ul>
        </div>
    </div>
}

@if (region == "Scripts")
{
    @Scripts.Render("~/bundles/slider")

    <script type="text/javascript">
        function ValidateForm(preview) {
            var validator = $('#publishForm').data("validator");
            var form = $('#publishForm');
            var questions = form.find('input[type="hidden"][name*="Question"]:not([name*="Values"])');
            var move = true;
            var result = true;
            questions.each(function (index, element) {
                var name = $(element).prop('name');
                var clearName = name.substring(0, name.lastIndexOf('.'));

                //All showed inputs, but not in modal window
                form.find('input[name*="' + clearName + '"]:not(div.modal input,[type="hidden"]),' +
                    'textarea[name*="' + clearName + '"]:not(div.modal textarea,[type="hidden"])').each(function (index, element) {
                        result = validator.element(element);
                        if (!result) {
                            $('#rootwizard').bootstrapWizard('show', $(element).parents('.tab-pane').attr('id'));
                            validator.focusInvalid();
                            //TODO: Exit if first founded
                            //return false;
                        }
                    });
                if (!result) {
                    move = false;
                    //TODO: Exit if first founded
                    //return false;
                }
            });
            if (move) {
                if (preview) {
                    alert('Survey passed');
                } else {
                    form.submit();
                }
            }
        }
        function CompanyClick(el, id, name) {
            if ($(el).parent().hasClass('left-companies-' + id)) {
                $(el).find('.fa-plus-circle').addClass('hide');
                $(el).find('.fa-minus-circle').removeClass('hide');
                $('.right-companies-' + id).append($(el));
                $(el).find('input[name="' + name + '"]').first().val(true);
            } else {
                $(el).find('.fa-plus-circle').removeClass('hide');
                $(el).find('.fa-minus-circle').addClass('hide');
                $('.left-companies-' + id).append($(el));
                $(el).find('input[name="' + name + '"]').first().val(false);
            }
        };

        function AllCompanyClick(id, action) {
            if (action == 1) {
                $('.left-companies-' + id + ' .company-prew').each(function(i) {
                    $(this).find('.fa-plus-circle').addClass('hide');
                    $(this).find('.fa-minus-circle').removeClass('hide');
                    $('.right-companies-' + id).append($(this));
                });
            } else {
                $('.right-companies-' + id + ' .company-prew').each(function(i) {
                    $(this).find('.fa-plus-circle').removeClass('hide');
                    $(this).find('.fa-minus-circle').addClass('hide');
                    $('.left-companies-' + id).append($(this));
                });
            }
        };

        function AddNode(isQ, isH, id, index) {
            var node = $('#add-node-' + id).val();
            if (node.trim().length > 0) {
                var companyName = node.trim().split(' ')[0];
                var modal = $('#addNodeModal-' + id + ' .modal-body');
                ShowLoader();
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetNQuestions","Poll")?relationshipId=' + id + '&index=' + index
                }).success(function (data) {
                    modal.append(data);
                    modal.find('[name*=".CompanyName"]').val(companyName);
                    $('#addNodeModal-' + id).on('shown.bs.modal', function () {
                        //On node question modal show
                        var validator = $('#publishForm').data("validator");
                        setTimeout(() => (modal.find('div[id*="slider"]').slider()
                            .on('slide',
                                function (value) {
                                    var name = $(value.currentTarget).attr('name');
                                    var names = name.substring(0, name.lastIndexOf('.')) + '.Values[0]';
                                    $("input[name=\'" + names + "\']").val(value.value);
                                })), 1);

                        var checkboxes = modal.find('input[type="checkbox"].validate');
                        checkboxes.each(function (index, element) {
                            $(element).rules("add",
                                {
                                    //Rules for checkbox with required type
                                    required: function (element) {
                                        var name = $(element).attr('name');
                                        var clearName = name.substring(0, name.lastIndexOf('.'));
                                        return !modal.find('input[type="checkbox"][name*="' + clearName + '"].validate:checked').length;
                                    }
                                });
                        });

                        //event on checkbox checked to remove message if some checked
                        checkboxes.each(function (index, element) {
                            $(element).change(function () {
                                $(element).closest('div').find('input[type="checkbox"]').each(function (i, e) {
                                    validator.element(e);
                                });
                            });
                        });

                    });
                    HideLoader();
                });

                //Add node company to list
                $('.right-companies-' + id).append($('<div class="company-prew" data-name=' +
                    companyName +
                    ' style="cursor:pointer">' +
                    node +
                    '</div>'));
                if (isQ === 1) {
                    $('#addNodeModal-' + id).modal('show');
                    $('#name-' + id).attr('data-find', companyName);
                    $('#name-' + id).html(node);
                }
                
            }
            $('#add-node-' + id).val('');
        };

        function ValidateModal(modal) {
            if (modal == null) {
                return;
            }
            var validator = $('#publishForm').data("validator");
            var questions = modal.find('input[type="hidden"][name*="Question"]:not([name*="Values"],[name*="CompanyName"])');
            var result = true;
            var move = true;

            questions.each(function(index, element) {
                var name = $(element).prop('name');
                var clearName = name.substring(0, name.lastIndexOf('.'));
                //All showed inputs, but not in modal window
                modal.find('input[name*="' + clearName + '"]:not([type="hidden"]),' +
                    'textarea[name*="' + clearName + '"]:not([type="hidden"])').each(function(index, element) {
                    result = validator.element(element);
                    if (!result) {
                        return false;
                    }
                });
                if (!result) {
                    move = false;
                }
            });
            
            return move;
        }

        function SaveNode(id, index) {
            var modal = $('#addNodeModal-' + id);
            var hide = ValidateModal(modal);
            
            if (!hide) {
                return;
            }

            var answerIndex = parseInt($('#userCompanyNumber-' + id).val());
            var fields = $('[name*="Items[' + index + '].NQuestionAnswers[*"]').not('[name*=".Slider"],input[type="radio"]:not(:checked),input[type="checkbox"]:not(:checked)');
            var result = [];

            fields.each(function(i, e) {
                var input = $(e).attr('name');
                var charIndex = input.indexOf('*');

                var number = parseInt(input.charAt(charIndex + 1)) + answerIndex;
                var resName = input.replaceAt(charIndex, number.toString());
                var item = $('<input>').attr({
                    type: 'hidden',
                    name: resName,
                    value: $(e).val()
                });
                result.push(item);
            });
            $.each(result,
                function(i, e) {
                    $("#NQResult").append(e);
                });
            $('#userCompanyNumber-' + id).val(answerIndex +
                fields.find('[name*=".QuestionId"]').length);
            if (hide) {
                modal.modal('hide');
            }
        }

        String.prototype.replaceAt = function(index, character) {
            return this.substr(0, index) + character + this.substr(index + character.length + 1);
        }

        function RemoveNode(id) {
            $('.right-companies-' + id + ' .company-prew[data-name="' + $('#name-' + id).attr('data-find') + '"]')
                .remove();
        };

        function resetSearch() {
            $('.search-companies').val('').keyup();
        }

        $(document).ready(function() {
            // Company search
            $('.search-companies').on('keyup',
                function(ev) {
                    var _id = $(ev.target).attr('data-id');
                    $('.left-companies-' + _id).find('.company-prew').each(function(index, el) {
                        if ($(el).text().toLowerCase().indexOf($(ev.target).val().toLowerCase()) == -1) {
                            $(el).hide();
                        } else {
                            $(el).show();
                        }
                    });
                });
            //

            $('#rootwizard').bootstrapWizard({
                onInit: function() {
                    var form = $('#publishForm');
                    var validator = form.validate({
                        ignore:[],
                        errorPlacement: function (error, $elem) {
                            error = error.css('color', 'red');
                            if (("checkbox, radio").indexOf($elem.attr('type')) !== -1) {
                                var errorContainer = $elem.closest('div.col-md-12').next();
                                if (!errorContainer.length) {
                                    $elem.closest('div').after($('<div>').addClass('col-md-12 error').append(error));
                                } else {
                                    errorContainer.html(error);
                                }
                            } else {
                                $elem.after(error);
                            }
                        }
                    });
                    //init form validator
                    var checkboxes = form.find('input[type="checkbox"].validate');
                    checkboxes.each(function(index, element) {
                        $(element).rules("add",
                        {
                            //Rules for checkbox with required type
                            required: function(element) {
                                var name = $(element).attr('name');
                                var clearName = name.substring(0, name.lastIndexOf('.'));
                                return !form.find('.tab-pane input[type="checkbox"][name*="'+clearName+'"].validate:checked').length;
                            }
                        });
                    });

                    //event on checkbox checked to remove message if some checked
                    checkboxes.each(function(index, element) {
                        $(element).change(function() {
                            $(element).closest('div').find('input[type="checkbox"]').each(function(i, e) {
                                validator.element(e);
                            });
                        });
                    });
                },
                onTabChange: function(tab, navigation, index) {
                    var validator = $('#publishForm').data("validator");
                    //validate current tab
                    var panel = $('#publishForm .tab-pane.active');
                    var questions = panel.find('input[type="hidden"][name*="Question"]:not([name*="Values"])');
                    var move = true;
                    var result = true;
                    questions.each(function(index, element) {
                        var name = $(element).prop('name');
                        var clearName = name.substring(0, name.lastIndexOf('.'));

                        //All showed inputs, but not in modal window
                        panel.find('input[name*="' + clearName + '"]:not(div.modal input,[type="hidden"]),' +
                            'textarea[name*="' + clearName + '"]:not(div.modal textarea,[type="hidden"])').each(function(index, element) {
                            result = validator.element(element);
                            if (!result) {
                                if (move) {
                                    validator.focusInvalid();
                                }
                            }
                        });
                        if (!result) {
                            move = false;
                        }
                    });

                    return move;
                }
            });
        });
    </script>
}