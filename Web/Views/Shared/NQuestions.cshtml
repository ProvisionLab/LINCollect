@model List<Web.Models.DTO.NQuestionModel>

@{
    var region = ViewData["region"] as string;
}

@if (region == "Html")
{
    if (Model.Any())
    {
        for (int j = 0; j < Model.Count; j++)
        {
            <hr class="question" />

            <div class="form-group question row">
                <div class="col-xs-8">
                    @if (!string.IsNullOrEmpty(Model[j].Introducing))
                    {
                        @Html.Raw(Model[j].Introducing)
                    }
                </div>
                @if (ViewData["Edit"] != null)
                {
                    <div class="col-xs-4 text-right">
                        <a href="#" onclick="editRespQuestion(@Model[j].Id, @Model[j].RelationshipItemId)">edit</a> | <a href="#" onclick="changeQPosition(false, @Model[j].Id)">up</a> | <a href="#" onclick="changeQPosition(true, @Model[j].Id)">down</a> | <a href="#" onclick="deleteQuestion(@Model[j].Id, @Model[j].OrderId)">delete</a>
                    </div>
                }
            </div>
            <div class="form-group question row">
                <div class="col-md-12">
                    <b>
                        <span class="order-id">@Model[j].OrderId.@(Model[j].IsCompulsory ? " *" : "")</span> @Html.Raw(Model[j].Text)
                    </b>
                </div>
                <div class="col-md-12">
                    @Html.Hidden($"{ViewData["base"]}.NQuestionAnswers[*{j}].QuestionId", Model[j].Id)
                    @Html.Hidden($"{ViewData["base"]}.NQuestionAnswers[*{j}].CompanyName", ViewData["company"])
                    @if (Model[j].QuestionFormat.Code == "text")
                    {
                        if (Model[j].TextRowsCount > 1)
                        {
                            if (Model[j].IsCompulsory)
                            {
                                @Html.TextArea($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", null, new { @class = "form-control", required = (Model[j].IsCompulsory ? "required" : ""), rows = Model[j].TextRowsCount })
                            }
                            else
                            {
                                @Html.TextArea($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", null, new { @class = "form-control", rows = Model[j].TextRowsCount })
                            }
                        }
                        else
                        {
                            if (Model[j].IsCompulsory)
                            {
                                @Html.TextBox($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", null, new { @class = "form-control", required = (Model[j].IsCompulsory ? "required" : "") })
                            }
                            else
                            {
                                @Html.TextBox($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", null, new { @class = "form-control" })
                            }
                        }
                    }
                    else if (Model[j].QuestionFormat.Code == "choice_across")
                    {

                        for (int k = 0; k < Model[j].Answers.Count; k++)
                        {

                            <label>
                                @Model[j].Answers[k].Text <br />
                                @if (Model[j].IsMultiple)
                                {
                                    <input type="checkbox" class="@(Model[j].IsCompulsory ? "validate" : "")" name="@($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[{k}]")" value="@Model[j].Answers[k].Value" @(Model[j].Answers[k].IsDefault ? "checked" : "") />
                                }
                                else
                                {
                                    if (Model[j].IsCompulsory)
                                    {
                                        @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault, new { required = Model[j].IsCompulsory ? "required" : "" })
                                    }
                                    else
                                    {
                                        @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault)
                                    }
                                }
                            </label>
                        }

                        if (Model[j].IsAnnotation)
                        {
                            @Html.TextArea($"{ViewData["base"]}.NQuestionAnswers[*{j}].Anotation", null, new { rows = 2, @class = $"form-control", required = (Model[j].IsCompulsory ? "required" : "") })
                        }
                    }
                    else if (Model[j].QuestionFormat.Code == "choice_down")
                    {
                        for (int k = 0; k < Model[j].Answers.Count; k++)
                        {
                            <label>
                                @if (Model[j].IsMultiple)
                                {
                                    <input type="checkbox" class="@(Model[j].IsCompulsory ? "validate" : "")" name="@($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[{k}]")" value="@Model[j].Answers[k].Value" @(Model[j].Answers[k].IsDefault ? "checked" : "") />
                                }
                                else
                                {
                                    if (Model[j].IsCompulsory)
                                    {
                                        @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault, new { required = Model[j].IsCompulsory ? "required" : "" })
                                    }
                                    else
                                    {
                                        @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault)
                                    }
                                }
                                @Model[j].Answers[k].Text
                            </label>
                            <br />
                        }
                    }
                    else if (Model[j].QuestionFormat.Code == "drop_down")
                    {
                        @Html.DropDownList($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", new SelectList(Model[j].Answers, "Value", "Text", Model[j].Answers.Any(t => t.IsDefault) ? Model[j].Answers.FirstOrDefault(t => t.IsDefault).Value : ""), new { @class = $"form-control {(Model[j].IsCompulsory ? "required" : "")}" })
                    }
                    else if (Model[j].QuestionFormat.Code == "matrix")
                    {
                        <table class="table table-bordered table-condensed">
                            <tr>
                                <th></th>
                                @foreach (var answer in Model[j].Answers)
                                {
                                    <th>
                                        @answer.Text
                                    </th>
                                }
                            </tr>
                            @{
                                var rows = Model[j].Rows.Split(',');
                            }
                            @for (int i = 0; i < rows.Length; i++)
                            {
                                <tr>
                                    <td>@rows[i]</td>
                                    @for (int k = 0; k < Model[j].Answers.Count; k++)
                                    {
                                        <td>
                                            @if (Model[j].IsCompulsory)
                                            {
                                                @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault, new { required = Model[j].IsCompulsory ? "required" : "" })
                                            }
                                            else
                                            {
                                                @Html.RadioButton($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].Answers[k].Value, Model[j].Answers[k].IsDefault)
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </table>
                        }
                        else if (Model[j].QuestionFormat.Code == "slider")
                        {
                            <div class="row">
                                @Html.Hidden($"{ViewData["base"]}.NQuestionAnswers[*{j}].Values[0]", Model[j].ValueMax)
                                <div class="col-xs-3 text-right">@Model[j].TextMin</div>
                                <div class="col-xs-6">
                                    <div id="slider-@Model[j].Id" name="@($"{ViewData["base"]}.NQuestionAnswers[*{j}].Slider")" data-slider-value="@Model[j].ValueMax" data-slider-min="@Model[j].ValueMin" data-slider-max="@Model[j].ValueMax" data-slider-step="@(Model[j].Resolution == 0 ? 1 : Model[j].Resolution)"
                                            data-slider-tooltip="@(Model[j].IsShowValue ? "show" : "hide")"></div>
                                </div>
                                <div class="col-xs-3">@Model[j].TextMax</div>
                            </div>
                        }
                </div>
            </div>
                                        }
                                    }
                                }
<!-- Modal -->
@if (region == "Scripts")
{
    if (ViewData["Edit"] != null)
    {
        <div class="modal fade" id="editQuestionModal" tabindex="-1" role="dialog" aria-labelledby="editQuestionLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="addQuestionLabel">Edit Question</h4>
                    </div>
                    <div class="modal-body">
                        @using (Ajax.BeginForm("RelationshipN", null, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "sucessQuestion" }, new { @id = "question-options-edit" }))
                    {
                    }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn purple" onclick="editQuestionSubmit()">Update</button>
                    </div>
                </div>
            </div>
        </div>
        <script type="text/javascript">
            function createNewQuestion(relId) {
                ShowLoader();
                $.ajax({
                    type: "GET",
                    url: "/Surveys/CreateNQuestion/?relId=" + relId
                }).success(function (data) {
                    $('#addQuestionModal #question-options').empty().html(data);
                    updateCkeditor();
                    $('#addQuestionModal').modal('show');
                }).always(function () {
                    HideLoader();
                });
            }

            function editRespQuestion(id, relId) {
                ShowLoader();
                $.ajax({
                    type: "POST",
                    url: '/Surveys/EditNQuestion/?id=' + id + '&relId=' + relId,
                    data: null
                }).success(function (data) {
                    $('#editQuestionModal #question-options-edit').empty().html(data);
                    updateCkeditor();
                    updateAnswer();
                }).always(function () {
                    HideLoader();
                });
                $('#editQuestionModal').modal('show');
            }

            function changeQPosition(action, id) {
                ShowLoader();
                $.ajax({
                    type: "POST",
                    url: '/Surveys/ChangeNQuestionPosition/?id=' + id + '&isInc=' + action,
                    data: null
                }).success(function (data) {
                    if (!data.success) {
                        alert('Error:' + data.error);
                    } else {
                        window.location.reload();
                    }
                }).always(function () {
                    HideLoader();
                });
            }
            function deleteQuestion(id, number) {
                if (confirm("Delete Question #" + number)) {
                    ShowLoader();
                    $.ajax({
                        type: "POST",
                        url: '/Surveys/DeleteNQuestion/?id=' + id,
                        data: null
                    }).success(function (data) {
                        if (!data.success) {
                            alert('Error:' + data.error);
                        } else {
                            window.location.reload();
                        }
                    }).always(function () {
                        HideLoader();
                    });
                }
            }
        </script>
    }
}